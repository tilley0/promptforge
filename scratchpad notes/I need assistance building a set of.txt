I need assistance building a set of Ansible tasks and playbooks to remediate SCAP findings on a network Red Hat Enterprise Linux v8.10 servers and workstations that must comply with the DISA STIG for Red Hat Enterprise Linux version 8.   There are 3 primary groups of systems: “Infrastructure”, “Dev”, and “Prod”.  The “Infrastructure” host comprises the support infrastructure systems and services and the user workstations.   The “Dev” and “Prod” systems are high-performance computing (HPC) clusters that have 4 types of nodes, which are grouped by the following roles: “Management”, “Data”, ”I/O”, and “Compute”.   The HPC clusters run a legacy advanced modeling codebase that relies on thousands of large data sets and Message Passing Interface (MPI).  Please start by creating a downloadable Git repository scaffolding for implementing Ansible playbooks and tasks, which will provide group variables and system inventories organized by primary groups and system roles.  The scaffolding should accommodate differing baseline security configuration requirements between the “Infrastructure” and the two HPC clusters. The 2 HPC clusters should have matching configurations but different operating rules and schedules. The Ansible playbooks and tasks should only rely on the standard set of modules that ship with RHEL8 and are commonly available through Red Hat Satellite Server via the standard repositories and EPEL.  The Playbooks should provide accommodations for excluding an annotated list of STIG IDs based on operating requirements.  The initial set of exception exclusions is provided in the file named "exception-list.csv".

The STIG Remediation approach should first run in check mode to report compliance status and potential configuration changes by host.  The Exception handling should support options for applying exclusions globally, by inventory groups, or specific hosts. Schedule of maintenance windows will be handled externally through our automation platform; however, the restarting of any services should be optimized to apply all changes to a given service and its configuration files prior to restarting the service instead of after each and every change.